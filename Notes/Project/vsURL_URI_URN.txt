# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    vsURL_URI_URN.txt                                  :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: codespace <codespace@student.42.fr>        +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/11/13 10:16:10 by codespace         #+#    #+#              #
#    Updated: 2024/11/13 15:58:01 by codespace        ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

https://www.rfc-editor.org/rfc/rfc3986.html  -> URI syntax

URI -> Uniform Resource Identifier
URL -> Uniform Resource Locator
URN -> Uniform Resource Name

URL and URN all both URIs, URI is the generic term for all


		URL (location)					URN (name)
	http://example.com/resource 	urn:isbn:0451450523

ISBN -> international standard book number


the URL identifies the means to locate a resource:
	the protocol (or "scheme") -> http,
	host (or "domain") (example.com),
	path (/resource),
	port (:443, implicit in this case)
	query: ?abc=cde (optional)
	fragment: #section2 (optional)


	fragment is a reference to a specific place within the resource -> like a section in html
		-> as we move in the RFC and have links to sections

https://example.com:8080/path/to/resource?query=abc#section1


https://eur05.safelinks.protection.outlook.com/?url=https%3A%2F%2Fu22559432.ct.sendgrid.net%2Fls%2Fclick%3Fupn%3Du001.iImwMfOuvFvQjnmD8ej2oiaI9S9IwugdfKWLsEgaW29Lp6UCfKZwj0pDup83B8xTXj9a-2Fjsen9KG9xjh75iJXMZW8wtAK5WRD1XZ5o-2Byz0avgUT6AkTmyppm4PA09jCeNwG79oQ04lhBPB-2Bqkjh-2FiM3Oh4X-2Bs0c15RqAEOLIAXvUnt7NezJcChkZ-2F4he-2F4f-2BMb4IPAFmJPAjG4GCfxh4ys-2F4BaJJ-2F4uYvR20Me3GXJ4yllaWGj-2BC4plS8wYfPCk4cRvFTh2wAQmEprXgfsfveA-3D-3D-mQh_1xYXKarlt-2BEoZXb-2Fl839t28YiMP4X4U6VVZYsDC3xfgK5AZ8jHuHraDwVz6TEXP7GEPkjD4x5hu3bDyLMNiCvrCdSnZzQZG6FS8dXhDn9o92CSnYbrdE7MX34GXLIJp9e-2F5jTtBiGN70H9H0oiJI71yJ3kxtRtUxx9U-2B6125F8ZIjeztG8-2F2cyPzg79iUSzKXAURGFFQdIE6fZfLqxUadogLxapPp61YBbVjZJeYDcU1sj2v-2FBCZ31dqOiDl7OFZHeanT6PiJOapWNu57nsvKA-3D-3D&data=05%7C02%7Cmanuel.aguiar%40gnbga.pt%7C3e33f2b609cc4ac8a1d508dd03e54198%7C10338048193a4298abea3596ae88b05e%7C0%7C0%7C638671005526273334%7CUnknown%7CTWFpbGZsb3d8eyJFbXB0eU1hcGkiOnRydWUsIlYiOiIwLjAuMDAwMCIsIlAiOiJXaW4zMiIsIkFOIjoiTWFpbCIsIldUIjoyfQ%3D%3D%7C0%7C%7C%7C&sdata=KyQLaFeCsWELJzTgB6KtgUutl8COJFzAtDniJFWyVbc%3D&reserved=0


character set:

	unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"

    reserved    = gen-delims / sub-delims

    gen-delims  = ":" / "/" / "?" / "#" / "[" / "]" / "@"

    sub-delims  = "!" / "$" / "&" / "'" / "(" / ")"
                  / "*" / "+" / "," / ";" / "="

since the character set that is allowed in a uri changes depending on which part it is.....
URL -> '/' is decoded, but query string '/' MUST be encoded
nginx uses 8 integers as bit sets for each one (nginx-master\src\core\ngx_string.c), line 1500
8 * 32

we as a server will usually decode urls sent by clients. however, since we have to implement
http redirects, we have to consider the we must encode urls as well.

FIRST: decompose the URI in its individual components via the explicit delimiters that are for sure not encoded
then. decode each component according to the allowed characters in each one.

you could decode unreserved characters right away, but why bother really........


 authority   = [ userinfo "@" ] host [ ":" port ]

 userinfo is not used anymore for security reasons, like user:password
		userinfo    = *( unreserved / pct-encoded / sub-delims / ":" )

so, authority will be host (ip literal, ipv4 address or a domain name that can be resolved by the system) and ":" port (optional)

IP-literal = "[" ( IPv6address / IPvFuture  ) "]"
	-> Ip literal is for ipv6, let's skip this.......


The server is NOT RESPONSIBLE for decoding the query string part of the uri, only until the "?" which marks the end of URL
The server IGNORES the fragment, it is the browser that uses it to move along the same resource
