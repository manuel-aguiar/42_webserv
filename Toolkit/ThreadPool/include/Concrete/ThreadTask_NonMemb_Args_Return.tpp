/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ThreadTask_NonMemb_Args_Return.tpp                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mmaria-d <mmaria-d@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/06 11:03:40 by mmaria-d          #+#    #+#             */
/*   Updated: 2024/10/09 08:31:38 by mmaria-d         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef THREADTASK_NONMEMB_ARGS_RETURN_TPP

# define THREADTASK_NONMEMB_ARGS_RETURN_TPP

# include <pthread.h>
# include <iostream>
# include <cstring>
# include <cassert>

# include "../Abstract/IThreadTask.hpp"
# include <vector>


/*
    Specializations for non member function that take up to 5 arguments and returns

    expansion generated by chatgpt (thanks, saved me hours.....)
*/

template <
	typename FunctionPointer
>
class ThreadTask;

template <typename Args, typename Return>
class ThreadTask<Return (*)(Args)> : public IThreadTask
{
public:
    ThreadTask(Return (*function)(Args), Args arguments, Return* placeReturn = NULL) :
        m_function(function),
        m_args(arguments),
        m_placeReturn(placeReturn)
    {}
    ~ThreadTask() {}
    ThreadTask(const ThreadTask& copy) :
        m_function(copy.m_function),
        m_args(copy.m_args),
        m_placeReturn(copy.m_placeReturn)
    {}
    ThreadTask& operator=(const ThreadTask& assign)
    {
        if (this == &assign)
            return *this;
        m_function = assign.m_function;
        m_args = assign.m_args;
        m_placeReturn = assign.m_placeReturn;
        return *this;
    }

    void execute() const
    {
        if (!m_function)
            return;
        if (m_placeReturn)
            *m_placeReturn = (*m_function)(m_args);
        else
            (*m_function)(m_args);
    }

    IThreadTask* clone() const
    {
        return new ThreadTask(*this);
    }

private:
    Return (*m_function)(Args);
    Args m_args;
    Return* m_placeReturn;
};




template <typename Arg1, typename Arg2, typename Return>
class ThreadTask<Return (*)(Arg1, Arg2)> : public IThreadTask
{
public:
    ThreadTask(Return (*function)(Arg1, Arg2), Arg1 arg1, Arg2 arg2, Return* placeReturn = NULL) :
        m_function(function),
        m_arg1(arg1),
        m_arg2(arg2),
        m_placeReturn(placeReturn)
    {}
    ~ThreadTask() {}
    ThreadTask(const ThreadTask& copy) :
        m_function(copy.m_function),
        m_arg1(copy.m_arg1),
        m_arg2(copy.m_arg2),
        m_placeReturn(copy.m_placeReturn)
    {}
    ThreadTask& operator=(const ThreadTask& assign)
    {
        if (this == &assign)
            return *this;
        m_function = assign.m_function;
        m_arg1 = assign.m_arg1;
        m_arg2 = assign.m_arg2;
        m_placeReturn = assign.m_placeReturn;
        return *this;
    }

    void execute() const
    {
        if (!m_function)
            return;
        if (m_placeReturn)
            *m_placeReturn = (*m_function)(m_arg1, m_arg2);
        else
            (*m_function)(m_arg1, m_arg2);
    }

    IThreadTask* clone() const
    {
        return new ThreadTask(*this);
    }

private:
    Return (*m_function)(Arg1, Arg2);
    Arg1 m_arg1;
    Arg2 m_arg2;
    Return* m_placeReturn;
};






template <typename Arg1, typename Arg2, typename Arg3, typename Return>
class ThreadTask<Return (*)(Arg1, Arg2, Arg3)> : public IThreadTask
{
public:
    ThreadTask(Return (*function)(Arg1, Arg2, Arg3), Arg1 arg1, Arg2 arg2, Arg3 arg3, Return* placeReturn = NULL) :
        m_function(function),
        m_arg1(arg1),
        m_arg2(arg2),
        m_arg3(arg3),
        m_placeReturn(placeReturn)
    {}
    ~ThreadTask() {}
    ThreadTask(const ThreadTask& copy) :
        m_function(copy.m_function),
        m_arg1(copy.m_arg1),
        m_arg2(copy.m_arg2),
        m_arg3(copy.m_arg3),
        m_placeReturn(copy.m_placeReturn)
    {}
    ThreadTask& operator=(const ThreadTask& assign)
    {
        if (this == &assign)
            return *this;
        m_function = assign.m_function;
        m_arg1 = assign.m_arg1;
        m_arg2 = assign.m_arg2;
        m_arg3 = assign.m_arg3;
        m_placeReturn = assign.m_placeReturn;
        return *this;
    }

    void execute() const
    {
        if (!m_function)
            return;
        if (m_placeReturn)
            *m_placeReturn = (*m_function)(m_arg1, m_arg2, m_arg3);
        else
            (*m_function)(m_arg1, m_arg2, m_arg3);
    }

    IThreadTask* clone() const
    {
        return new ThreadTask(*this);
    }

private:
    Return (*m_function)(Arg1, Arg2, Arg3);
    Arg1 m_arg1;
    Arg2 m_arg2;
    Arg3 m_arg3;
    Return* m_placeReturn;
};


template <typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Return>
class ThreadTask<Return (*)(Arg1, Arg2, Arg3, Arg4)> : public IThreadTask
{
public:
    ThreadTask(Return (*function)(Arg1, Arg2, Arg3, Arg4), Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Return* placeReturn = NULL) :
        m_function(function),
        m_arg1(arg1),
        m_arg2(arg2),
        m_arg3(arg3),
        m_arg4(arg4),
        m_placeReturn(placeReturn)
    {}
    ~ThreadTask() {}
    ThreadTask(const ThreadTask& copy) :
        m_function(copy.m_function),
        m_arg1(copy.m_arg1),
        m_arg2(copy.m_arg2),
        m_arg3(copy.m_arg3),
        m_arg4(copy.m_arg4),
        m_placeReturn(copy.m_placeReturn)
    {}
    ThreadTask& operator=(const ThreadTask& assign)
    {
        if (this == &assign)
            return *this;
        m_function = assign.m_function;
        m_arg1 = assign.m_arg1;
        m_arg2 = assign.m_arg2;
        m_arg3 = assign.m_arg3;
        m_arg4 = assign.m_arg4;
        m_placeReturn = assign.m_placeReturn;
        return *this;
    }

    void execute() const
    {
        if (!m_function)
            return;
        if (m_placeReturn)
            *m_placeReturn = (*m_function)(m_arg1, m_arg2, m_arg3, m_arg4);
        else
            (*m_function)(m_arg1, m_arg2, m_arg3, m_arg4);
    }

    IThreadTask* clone() const
    {
        return new ThreadTask(*this);
    }

private:
    Return (*m_function)(Arg1, Arg2, Arg3, Arg4);
    Arg1 m_arg1;
    Arg2 m_arg2;
    Arg3 m_arg3;
    Arg4 m_arg4;
    Return* m_placeReturn;
};

template <typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Return>
class ThreadTask<Return (*)(Arg1, Arg2, Arg3, Arg4, Arg5)> : public IThreadTask
{
public:
    ThreadTask(Return (*function)(Arg1, Arg2, Arg3, Arg4, Arg5), Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Return* placeReturn = NULL) :
        m_function(function),
        m_arg1(arg1),
        m_arg2(arg2),
        m_arg3(arg3),
        m_arg4(arg4),
        m_arg5(arg5),
        m_placeReturn(placeReturn)
    {}
    ~ThreadTask() {}
    ThreadTask(const ThreadTask& copy) :
        m_function(copy.m_function),
        m_arg1(copy.m_arg1),
        m_arg2(copy.m_arg2),
        m_arg3(copy.m_arg3),
        m_arg4(copy.m_arg4),
        m_arg5(copy.m_arg5),
        m_placeReturn(copy.m_placeReturn)
    {}
    ThreadTask& operator=(const ThreadTask& assign)
    {
        if (this == &assign)
            return *this;
        m_function = assign.m_function;
        m_arg1 = assign.m_arg1;
        m_arg2 = assign.m_arg2;
        m_arg3 = assign.m_arg3;
        m_arg4 = assign.m_arg4;
        m_arg5 = assign.m_arg5;
        m_placeReturn = assign.m_placeReturn;
        return *this;
    }

    void execute() const
    {
        if (!m_function)
            return;
        if (m_placeReturn)
            *m_placeReturn = (*m_function)(m_arg1, m_arg2, m_arg3, m_arg4, m_arg5);
        else
            (*m_function)(m_arg1, m_arg2, m_arg3, m_arg4, m_arg5);
    }

    IThreadTask* clone() const
    {
        return new ThreadTask(*this);
    }

private:
    Return (*m_function)(Arg1, Arg2, Arg3, Arg4, Arg5);
    Arg1 m_arg1;
    Arg2 m_arg2;
    Arg3 m_arg3;
    Arg4 m_arg4;
    Arg5 m_arg5;
    Return* m_placeReturn;
};

#endif