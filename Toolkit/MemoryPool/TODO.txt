
1) Nginx_PoolAllocator is expected 
to be used by one of three: 
StackMemoryPool, HeapMemoryPool
and Nginx_MemoryPool

add a method in each of the threee 
called ElementSize()

The pool allocator will adjusted 
the demanded size depending on the 
type the pool is allocating, when a
called uses Allocator::allocate()


It is just a safeguard for if the 
pool is used for different element 
types than the original, to 
maintain internal integrity

#################

2) Heap ObjectPool, typedef the 
Alllocator rebind, SlotAllocator

maybe easier to read
Heap_ObjectPool can be spawned with 
a rebindable allocator, so it can 
appear from std::allocator<T>

############
3) c++17 introduces node_type
for containers, allowing to get
the correct compiletime size
for the HeapObjectPool

Since we don't at c++98, i have to
still with StackSlab, HeapSlab
and the SlabAllocator

It is the only viable optiob for two
containers sharing and ObjectPool,
and the node size must be figured
manually

With c++17, i could Heap_ObjectPool
<std::set<whatever>::node_type> and
and it would work out of the box
