/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ThreadTask_NonMemb_Args_NoReturn.tpp               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mmaria-d <mmaria-d@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/06 11:03:40 by mmaria-d          #+#    #+#             */
/*   Updated: 2024/09/06 11:12:47 by mmaria-d         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef THREADTASK_NONMEMB_ARGS_NORETURN_TPP

# define THREADTASK_NONMEMB_ARGS_NORETURN_TPP

# include <pthread.h>
# include <iostream>
# include <cstring>
# include <cassert>

# include "../Abstract/IThreadTask.hpp"
# include <vector>


/*
    Specializations for non member function that take up to 5 arguments and returns

    expansion generated by chatgpt (thanks, saved me hours.....)
*/

template <
	typename FunctionPointer
>
class ThreadTask;


template <typename Args>
class ThreadTask<void (*)(Args)> : public IThreadTask
{
public:
    ThreadTask(void (*function)(Args), Args arguments) :
        _function(function),
        _args(arguments)
    {}
    ~ThreadTask() {}
    ThreadTask(const ThreadTask& copy) :
        _function(copy._function),
        _args(copy._args)
    {}
    ThreadTask& operator=(const ThreadTask& assign)
    {
        if (this == &assign)
            return *this;
        _function = assign._function;
        _args = assign._args;
        return *this;
    }

    void execute() const override
    {
        if (!_function)
            return;
        (*_function)(_args);
    }

    IThreadTask* clone() const override
    {
        return new ThreadTask(*this);
    }

private:
    void (*_function)(Args);
    Args _args;
};




template <typename Arg1, typename Arg2>
class ThreadTask<void (*)(Arg1, Arg2)> : public IThreadTask
{
public:
    ThreadTask(void (*function)(Arg1, Arg2), Arg1 arg1, Arg2 arg2) :
        _function(function),
        _arg1(arg1),
        _arg2(arg2)
    {}
    ~ThreadTask() {}
    ThreadTask(const ThreadTask& copy) :
        _function(copy._function),
        _arg1(copy._arg1),
        _arg2(copy._arg2)
    {}
    ThreadTask& operator=(const ThreadTask& assign)
    {
        if (this == &assign)
            return *this;
        _function = assign._function;
        _arg1 = assign._arg1;
        _arg2 = assign._arg2;
        return *this;
    }

    void execute() const override
    {
        if (!_function)
            return;
        (*_function)(_arg1, _arg2);
    }

    IThreadTask* clone() const override
    {
        return new ThreadTask(*this);
    }

private:
    void (*_function)(Arg1, Arg2);
    Arg1 _arg1;
    Arg2 _arg2;
};



template <typename Arg1, typename Arg2, typename Arg3>
class ThreadTask<void (*)(Arg1, Arg2, Arg3)> : public IThreadTask
{
public:
    ThreadTask(void (*function)(Arg1, Arg2, Arg3), Arg1 arg1, Arg2 arg2, Arg3 arg3) :
        _function(function),
        _arg1(arg1),
        _arg2(arg2),
        _arg3(arg3)
    {}
    ~ThreadTask() {}
    ThreadTask(const ThreadTask& copy) :
        _function(copy._function),
        _arg1(copy._arg1),
        _arg2(copy._arg2),
        _arg3(copy._arg3)
    {}
    ThreadTask& operator=(const ThreadTask& assign)
    {
        if (this == &assign)
            return *this;
        _function = assign._function;
        _arg1 = assign._arg1;
        _arg2 = assign._arg2;
        _arg3 = assign._arg3;
        return *this;
    }

    void execute() const override
    {
        if (!_function)
            return;
        (*_function)(_arg1, _arg2, _arg3);
    }

    IThreadTask* clone() const override
    {
        return new ThreadTask(*this);
    }

private:
    void (*_function)(Arg1, Arg2, Arg3);
    Arg1 _arg1;
    Arg2 _arg2;
    Arg3 _arg3;
};



template <typename Arg1, typename Arg2, typename Arg3, typename Arg4>
class ThreadTask<void (*)(Arg1, Arg2, Arg3, Arg4)> : public IThreadTask
{
public:
    ThreadTask(void (*function)(Arg1, Arg2, Arg3, Arg4), Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) :
        _function(function),
        _arg1(arg1),
        _arg2(arg2),
        _arg3(arg3),
        _arg4(arg4)
    {}
    ~ThreadTask() {}
    ThreadTask(const ThreadTask& copy) :
        _function(copy._function),
        _arg1(copy._arg1),
        _arg2(copy._arg2),
        _arg3(copy._arg3),
        _arg4(copy._arg4)
    {}
    ThreadTask& operator=(const ThreadTask& assign)
    {
        if (this == &assign)
            return *this;
        _function = assign._function;
        _arg1 = assign._arg1;
        _arg2 = assign._arg2;
        _arg3 = assign._arg3;
        _arg4 = assign._arg4;
        return *this;
    }

    void execute() const override
    {
        if (!_function)
            return;
        (*_function)(_arg1, _arg2, _arg3, _arg4);
    }

    IThreadTask* clone() const override
    {
        return new ThreadTask(*this);
    }

private:
    void (*_function)(Arg1, Arg2, Arg3, Arg4);
    Arg1 _arg1;
    Arg2 _arg2;
    Arg3 _arg3;
    Arg4 _arg4;
};



template <typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
class ThreadTask<void (*)(Arg1, Arg2, Arg3, Arg4, Arg5)> : public IThreadTask
{
public:
    ThreadTask(void (*function)(Arg1, Arg2, Arg3, Arg4, Arg5), Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) :
        _function(function),
        _arg1(arg1),
        _arg2(arg2),
        _arg3(arg3),
        _arg4(arg4),
        _arg5(arg5)
    {}
    ~ThreadTask() {}
    ThreadTask(const ThreadTask& copy) :
        _function(copy._function),
        _arg1(copy._arg1),
        _arg2(copy._arg2),
        _arg3(copy._arg3),
        _arg4(copy._arg4),
        _arg5(copy._arg5)
    {}
    ThreadTask& operator=(const ThreadTask& assign)
    {
        if (this == &assign)
            return *this;
        _function = assign._function;
        _arg1 = assign._arg1;
        _arg2 = assign._arg2;
        _arg3 = assign._arg3;
        _arg4 = assign._arg4;
        _arg5 = assign._arg5;
        return *this;
    }

    void execute() const override
    {
        if (!_function)
            return;
        (*_function)(_arg1, _arg2, _arg3, _arg4, _arg5);
    }

    IThreadTask* clone() const override
    {
        return new ThreadTask(*this);
    }

private:
    void (*_function)(Arg1, Arg2, Arg3, Arg4, Arg5);
    Arg1 _arg1;
    Arg2 _arg2;
    Arg3 _arg3;
    Arg4 _arg4;
    Arg5 _arg5;
};



#endif