/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ThreadTask_Memb_Args_Return_Const.tpp              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mmaria-d <mmaria-d@student.42lisboa.com    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/09/06 11:03:40 by mmaria-d          #+#    #+#             */
/*   Updated: 2024/09/06 11:23:04 by mmaria-d         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef THREADTASK_MEMB_ARGS_RETURN_CONST_TPP

# define THREADTASK_MEMB_ARGS_RETURN_CONST_TPP

# include <pthread.h>
# include <iostream>
# include <cstring>
# include <cassert>

# include "../Abstract/IThreadTask.hpp"
# include <vector>


/*
    Specializations for non member function that take up to 5 arguments and returns

    expansion generated by chatgpt (thanks, saved me hours.....)
*/

template <
	typename FunctionPointer
>
class ThreadTask;


template <
	typename Class,
	typename Args,
	typename Return
>
class ThreadTask<Return (Class::*)(Args) const> : public IThreadTask
{
	public:
		ThreadTask(const Class& instance, Return (Class::*function)(Args) const, Args arguments, Return* placeReturn = NULL) :
			_instance(instance),
			_function(function),
			_args(arguments),
			_placeReturn(placeReturn)
		{};
		~ThreadTask() {};
		ThreadTask(const ThreadTask& copy) :
			_instance(copy._instance),
			_function(copy._function),
			_args(copy._args),
			_placeReturn(copy._placeReturn)
		{};
		ThreadTask& operator=(const ThreadTask& assign)
		{
			if (this == &assign)
				return (*this);
			*this = assign;
			return (*this);
		}

		void			execute() const
		{
			if (!_function)
				return ;
			if (_placeReturn)
				*_placeReturn = (_instance.*_function)(_args);
			else
				(_instance.*_function)(_args);
		};
		IThreadTask*	clone() const
		{
			return (new ThreadTask(*this));
		};

	private:
		const Class&		  _instance;
		Return		  (Class::*_function)(Args) const;
		Args			_args;
		Return*		 _placeReturn;
};


#endif