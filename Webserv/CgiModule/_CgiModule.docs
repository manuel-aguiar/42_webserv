# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    _CgiModule.docs                                    :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mmaria-d <mmaria-d@student.42lisboa.com    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/11/22 10:50:43 by manuel            #+#    #+#              #
#    Updated: 2025/01/10 10:59:33 by mmaria-d         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

The CgiModule executes CGI requests.

The CgiModule's responsibility is only to prepare the environment variables,
prepare pipes, fork and exec. It passes the fds to the relevant caller to monitor
and is responsible for the cleaning up of resources it specifically created:
the pipes, processes and environment variables.

It will be the caller's responbility to do the IO, in its own terms (not forced by the CgiModule)
prepare buffers, decide whether there is anything to send, etcetc.


*****************************************************************************
Handling requests:

CgiModule::acquireRequestData
	-> internally creates a CgiRequestData and gives it to the caller

	The caller must fill the CgiRequestData with the relevant data required to execute
	the Cgi request (see CgiRequestData/_CgiRequestData.docs) using the provided setters.

*************


CgiModule::executeRequest(CgiRequestData& data)
	-> queues up the request data in the CgiModule internal data structures and executes when possible
	(when there are executors available)

**************

CgiModule::finishRequest(CgiRequestData& data)
	-> this serves to finish the request in any case
	-> the user MUST call this to release the resources associated
		with the request -> freeing the slot on the queue, freeing the worker
	-> so ideally, as soon as the user is finished getting the data that it needs
		from the script, it should call this function to open space for more requests
		to be processed
	-> this can also be used to cancel a request for instance if the Client connection is closed
		and therefore the execution is no longer needed.


**********************************************************


Managing interpreters:

CgiModule::addInterpreter(const std::string& extension, const std::string& path)
	-> which takes an extension (eg "py"), and an absolute path to the interpreter (eg "/usr/bin/python3")
	-> Note: the same extension cannot be executed by different interpreters. the last call to addInterpreter
	for a given extension will be the one used for execution.

**********

CgiModule::removeInterpreter(const std::string& extension);
	-> removes the target interpreter by providing the extension it executes, as key
		

*************************************
************************************
**************************************



