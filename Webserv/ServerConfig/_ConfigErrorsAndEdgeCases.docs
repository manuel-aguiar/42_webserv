# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    _ConfigErrorsAndEdgeCases.docs                     :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: manuel <manuel@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/11/19 14:48:02 by mmaria-d          #+#    #+#              #
#    Updated: 2024/11/20 14:36:38 by manuel           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Ok so we need to check errors at config files. A tricky one i found, consider this configuration:

server {
    listen 0.0.0.0:80;
    server_name example.com;
}

server {
    listen 192.168.1.100:80;
    server_name example.com;
}

0.0.0.0 is a wildcard IP address, both blocks point to the same host. Now, individual blocks
could have different access levels depending on where the connection is comming from
(maybe you can access some previleged location if it comes from your local network).

So this is not really an error.

In fact, the operating system (and nginx) will route the connection
to THE MOST SPECIFIC SOCKET ADDRESS THAT MATCHES.

So, Incoming connection to 192.168.1.100:80:
    OS will ring the listening socket for 192.168.1.100:80 and not 0.0.0.0:80 because THE FIRST ONE is
    the most specific!!

##############################

for nginx, this is not an error, it simply ignores the second block

server {
    listen 0.0.0.0:80;
    server_name example.com;
}

server {
    listen 0.0.0.0:80;
    server_name example.com;
}

for us, for simplicity, WE MARK AS AN INVALID CONFIG, we have two server blocks
for the same domain, listening on the same port from the same IP combination.

################################

So, for managing the servers, we need to do this check, using 3 variables:

IP:PORT:server_name.

there can be no two server blocks with the exact same combination of these three, we throw an error in that case

(we, internally, will do the distribution from the most specific (non 0.0.0.0) to the least specific (0.0.0.0))


###############################


Nginx DOES NOT check path validity (root, locations), it defers that for runtime.
if a file asked by a request is not found or doesn't exist, it answers 404 NOT FOUND.

Suppose the file system changes due to scripts triggering etc, new paths may not yet
be available during configuration load.
(for instance, a POST request to upload a new file to the filesystem during runtime)

However, syntax must be correct.

################################

ALLOW multiple "listen" directives per server block (should not be an error)

###############################

Roots:

if you have two roots at the same scope level, as in:

server {
	root /somefolder
	root /otherfolder
}

/otherfolder will override the /somefolder. in any case there can only be one single root


You can handle it as you wish so as long as there is only one final root per server block
You can either override or return an error
