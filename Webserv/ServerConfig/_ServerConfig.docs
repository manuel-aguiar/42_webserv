# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    _ServerConfig.docs                                 :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: manuel <manuel@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/11/19 12:00:50 by mmaria-d          #+#    #+#              #
#    Updated: 2024/11/20 09:22:40 by manuel           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #


This class will be used by ServerManager to initialize the infrastructure
to serve the webserver, as in:
    ServerManager(const ServerConfig& config).



Configuration:

	General, program level:
		max workers (this would apply in a multithreading context which we may not implement)
				default value = 1;
		max concurrent CGI: we need to limit at the application level to make sure
			-> can have a default value, say 10 (mindfull of fork bombs)
		max connections : max simmultaneous open connections, per workers
			-> can have a default value, say 100

		{
			- Nginx does have limiters of connections per_ip, per server name etc, allowing
			for de-facto resource distribution between multiple server blocks/locations.
			We could implement that, but let's leave that to a bonus-bonus.

			Therefore, workers+cgi+connections will be established at the program level and not at block level

			This implies, at program level: 1 server manager, 1 connection manager, 1 Cgi manager.
			(if we were to implement multithreading (workers), all of these would access these same resources, mutexed
			with the slight difference that each one would have 1 Event manager EACH)
		}

		Since the general directives all have default values, the general directive can be effectively ommited

	server block:
		[listen] [IP address= 0.0.0.0]:port  -> no default value for PORT, lack of directive is ERROR
			we do default the IP address to be 0.0.0.0 : we listen to connections on that port, comming from any IP address
		domain names (server names) -> no default value, lack of directive is ERROR


		errorpages: we can default these to the Webserv/StaticAssets corresponding pages.
			ommition is NOT AN ERROR

	location: (if client asks for some specific resource, what do we do)

		type: -> action to be taken at location. MUTUALLY EXCLUSIVE, each location can only have 1 type.

			the specifications can be done inside the type-block, or outside but matching.
			Up to the assignee to decide formating and parse accordingly


			normal			-> just a regular location, send files straight and receive files straight
			redirection		-> http redirection, if client asks for this location, send it to the new one
			cgi				-> should trigger a server side script to be executed and whose result be sent to the client

			normal: -> nothing of note, could be ommited

			redirection:
					-> status code to return
					-> page to send to client such that it can follow


			cgi:
				- path;			-> the path to the interpreter of CGI (should probably to a check via syscall access, that exists)
				- extension;	-> file extension that is expected to be executed by this CGI unit

		methods: we can have a default such as GET and HEAD

		autoindex: on | off
			-> default value: OFF
			-> this is what is referred to as "directory listing"
			-> if the URL in a request resolves to a folder, and the location specified
			allows directory listing (autoindex on) we will send the client the folder structure (like an ls -a)
			within that folder
			-> if autoindex is off (or not )





##########################

WebservDefaultConfig.h

    Here we have #define that will have the default values to be used by the server
    in case the user doesn't supply an alternative.

    These values will then be loaded in the DefaultConfig class,
    which will then be used on the ServerConfig class to fulfill values not supplied
    by the configuration file
