# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    _ServerConfig.docs                                 :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: manuel <manuel@student.42.fr>              +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/11/19 12:00:50 by mmaria-d          #+#    #+#              #
#    Updated: 2024/11/20 08:42:35 by manuel           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #


This class will be used by ServerManager to initialize the infrastructure
to serve the webserver, as in:
    ServerManager(const ServerConfig& config).



Configuration:

General, program level:
    max workers (this would apply in a multithreading context which we may not implement)
            default value = 1;
    max concurrent CGI: we need to limit at the application level to make sure
		-> can have a default value, say 10 (mindfull of fork bombs)
    max connections : max simmultaneous open connections, per workers
		-> can have a default value, say 100

{
	- Nginx does have limiters of connections per_ip, per server name etc, allowing
	for de-facto resource distribution between multiple server blocks/locations.
	We could implement that, but let's leave that to a bonus-bonus.

	Therefore, workers+cgi+connections will be established at the program level and not at block level
}


server block:
    [listen] [IP address= 0.0.0.0]:port  -> no default value for PORT, lack of directive is ERROR
        we do default the IP address to be 0.0.0.0 : we listen to connections on that port, comming from any IP address
    domain names (server names) -> no default value, lack of directive is ERROR


    errorpages: we can default these to the Webserv/StaticAssets corresponding pages.
        ommition is NOT AN ERROR

location: (if client asks for some specific resource, what do we do)

    methods: we can have a default such as GET and HEAD

    return 404;

    cgi:
        - path;



##########################

WebservDefaultConfig.h

    Here we have #define that will have the default values to be used by the server
    in case the user doesn't supply an alternative.

    These values will then be loaded in the DefaultConfig class,
    which will then be used on the ServerConfig class to fulfill values not supplied
    by the configuration file
